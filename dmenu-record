#!/usr/bin/env bash

set -eo pipefail

# config: folders
folder=${DMENU_RECORD_FOLDER:-~/Screencasts}
sub=${DMENU_RECORD_SUB:-"$(date +%Y)"}

# config: ffmpeg settings
terminal=${DMENU_RECORD_TERMINAL:-""}
fps=${DMENU_RECORD_FPS:-60}
dmenu=${DMENU_RECORD_DMENU:-"dmenu -i -p"}
audio_settings=${DMENU_RECORD_AUDIO_SETTINGS:-"-c:a libopus -b:a 320k"}
video_settings=${DMENU_RECORD_VIDEO_SETTINGS:-"-c:v libx264 -crf 18 -preset fast"}

# useful variables
datetime="$(date +%Y-%m-%d_%H-%M-%S)"
foldersub="$folder/$sub"

# creates the year subfolder if not exist
[ -d "$foldersub" ] || mkdir -p "$foldersub"

dmenu_ask() {
    record_what=$(printf "monitor\\nworkspace\\nselection" | $dmenu "record what:")
    dmenu_verify "$record_what" "monitor workspace selection"

    if [ "$record_what" == "workspace" ]; then
        split_monitors=$(printf "yes\\nno" | $dmenu "split monitors:")
        dmenu_verify "$split_monitors" "yes no"
    fi

    menu_fps=$(printf "default\\n144\\n60\\n30\\n25\\n12" | $dmenu "framerate:")
    dmenu_verify "$menu_fps" "default 144 60 30 25 12"
    [ "$menu_fps" != "default" ] && fps=$menu_fps
    
    record_mic=$(printf "yes\\nno" | $dmenu "record mic:")
    dmenu_verify "$record_mic" "yes no"

    record_desktop=$(printf "yes\\nno" | $dmenu "record desktop audio:")
    dmenu_verify "$record_desktop" "yes no"

    if [ "$record_mic" == "yes" ] && [ "$record_desktop" == "yes" ]; then
        split_audio_tracks=$(printf "yes\\nno" | $dmenu "split audio tracks:")
        dmenu_verify "$split_audio_tracks" "yes no"
    fi
}

dmenu_verify() {
    local term="$1"
    local valid_terms="$2"

    # very simple normalizing
    local normalized_terms=$(echo "$valid_terms" | tr ' ' '\n')

    # check if the selection is valid
    if ! echo "$normalized_terms" | grep -Fxq "$term"; then
        notify-send "dmenu-record: Error" "No valid selection made. Exiting..."
        echo "No valid selection made. Exiting..."
        exit 1
    fi
}

print_size() { # https://gist.github.com/naelstrof/f9b74b5221cdc324c0911c89a47b8d97
    case "$record_what" in
        "monitor")
            MONITORS=$(xrandr | grep -o '[0-9]*x[0-9]*[+-][0-9]*[+-][0-9]*')
            # Get the location of the mouse
            XMOUSE=$(xdotool getmouselocation | awk -F "[: ]" '{print $2}')
            YMOUSE=$(xdotool getmouselocation | awk -F "[: ]" '{print $4}')

            for mon in ${MONITORS}; do
                # Parse the geometry of the monitor
                MONW=$(echo ${mon} | awk -F "[x+]" '{print $1}')
                MONH=$(echo ${mon} | awk -F "[x+]" '{print $2}')
                MONX=$(echo ${mon} | awk -F "[x+]" '{print $3}')
                MONY=$(echo ${mon} | awk -F "[x+]" '{print $4}')
                # Use a simple collision check
                if (( ${XMOUSE} >= ${MONX} )); then
                    if (( ${XMOUSE} <= ${MONX}+${MONW} )); then
                        if (( ${YMOUSE} >= ${MONY} )); then
                            if (( ${YMOUSE} <= ${MONY}+${MONH} )); then
                                # We have found our monitor!
                                echo "-f x11grab -thread_queue_size 1024 -s "${MONW}x${MONH}" -r ${fps} -i :0.0+"${MONX},${MONY}" "
                                return 0
                            fi
                        fi
                    fi
                fi
            done
            exit 1
        ;;

        "workspace")
            if [ "$split_monitors" == "no" ]; then
                echo "-f x11grab -thread_queue_size 1024 -s "$(xrandr | grep -oP '(?<=current ).*(?=,)' | tr -d ' ')" -r ${fps} -i "$DISPLAY" "
            else
                local output=""

                MONITORS=$(xrandr | grep -o '[0-9]*x[0-9]*[+-][0-9]*[+-][0-9]*')

                for mon in ${MONITORS}; do
                    # Parse the geometry of the monitor
                    MONW=$(echo ${mon} | awk -F "[x+]" '{print $1}')
                    MONH=$(echo ${mon} | awk -F "[x+]" '{print $2}')
                    MONX=$(echo ${mon} | awk -F "[x+]" '{print $3}')
                    MONY=$(echo ${mon} | awk -F "[x+]" '{print $4}')
                    
                    # Append monitors to the output
                    output+="-f x11grab -thread_queue_size 1024 -s "${MONW}x${MONH}" -r ${fps} -i :0.0+"${MONX},${MONY}" "
                done

                echo -e "$output"
            fi
        ;;

        "selection")
            while true; do # so slop fails some times on kde so i just force it until it spits out a region or the user aborts
                local slop=$(slop --noopengl --color 0.3,0.4,0.6 -f "%x %y %w %h" 2>&1)  # Capture both stdout and stderr
                if [[ "$slop" == *"Selection was cancelled by keystroke or right-click"* ]]; then
                    notify-send "dmenu-record: Error!" "Selection was cancelled by keystroke or right-click."
                    exit 1  # Stop if the cancellation message appears
                elif [[ "$slop" =~ ^[0-9]+\ [0-9]+\ [0-9]+\ [0-9]+$ ]]; then
                    break
                fi
            done

            read -r X Y W H < <(echo $slop)
            echo "-f x11grab -thread_queue_size 1024 -s "$W"x"$H" -r ${fps} -i :0.0+"$X,$Y""
        ;;
    esac
}

print_audio() {
    local settings=""

    if [ "$record_mic" == "no" ] && [ "$record_desktop" == "no" ]; then
        return 0;
    fi

    if [ "$record_mic" == "yes" ]; then
        settings+="-f pulse -thread_queue_size 1024 -i "$(get_pulse_source)" -ac 1 "
    fi

    if [ "$record_desktop" == "yes" ]; then
        settings+="-f pulse -thread_queue_size 1024 -i "$(get_pulse_sink)" -ac 2 "
    fi

    echo "$settings ${audio_settings}"
}

get_pulse_sink() {
    # seems always be something.monitor
    echo "$(wpctl inspect @DEFAULT_AUDIO_SINK@ 2> /dev/null | grep node.name | awk -F '"' '{print $2}').monitor"
}

get_pulse_source() {
    echo "$(wpctl inspect @DEFAULT_AUDIO_SOURCE@ 2> /dev/null | grep node.name | awk -F '"' '{print $2}').monitor"
}

print_maps() {
    local settings=""
    local screen_num="$(xrandr | grep -o '[0-9]*x[0-9]*[+-][0-9]*[+-][0-9]*' | wc -l)"

    if [ "$split_monitors" == "yes" ]; then
        for i in $(seq 0 $(( $screen_num - 1 )) ); do
            settings+="-map ${i}:v:0 -metadata:s:v:${i} title=Screen_${i} "
        done
    else
        settings+="-map 0:v "
        screen_num=1 # reset back to 1 if no split monitors, maybe make another variable for this?
    fi

    if [ "$split_audio_tracks" == "yes" ]; then
        settings+="-map $(( $screen_num - 1 + 1 )):a -map $(( $screen_num - 1 + 2 )):a -metadata:s:a:0 title=Microphone -metadata:s:a:1 title=Desktop"
    else
        if [ "$record_mic" == "yes" ] && [ "$record_desktop" == "yes" ]; then
            settings+="-filter_complex amix=inputs=2"
        elif [ "$record_mic" == "yes" ] || [ "$record_desktop" == "yes" ]; then
            settings+="-map $(( $screen_num - 1 + 1 )):a"
        fi
    fi

    echo "$settings"
}

generate_file_name() {
    local filename="$foldersub/${datetime}___"$record_what".mkv"

    echo "$filename"
} 

print_args() {
    local args="-y $(print_size) $(print_audio) $(print_maps) ${video_settings} $(generate_file_name)"
    
    echo "$args" | sed 's/  */ /g'
}

ffmpeg_record() {
    if [ -z "$terminal" ]; then
        ffmpeg $(print_args) &
    else
        # if $terminal is set, spawn a terminal to run ffmpeg isntead of running it on the background
        "$terminal" -e ffmpeg $(print_args) &
    fi

    if [ ! $? == 0 ]; then
        notify-send "dmenu-record: Error" "Something went wrong... Exiting"
    fi
    
    # needs to wait a bit or else pgrep won't print anything...
    sleep 2
    pgrep -af "ffmpeg.*x11grab.*$datetime" | grep -v "$terminal" | awk '{ print $1 }' > "/tmp/dmenu-record.pid"
}

ask_recording() {
    dmenu_ask
    ffmpeg_record
}

kill_recording() {
    kill -15 "$(cat "/tmp/dmenu-record.pid")"
    rm -f "/tmp/dmenu-record.pid"
}

ask_to_end() {
    local response=$(printf "no\\nyes" | $dmenu "end recording:") && \
    [ "$response" = "yes" ] && kill_recording
}

send_notification_begin() {
    notify-send "Started Screencasting!" "The file will be saved at ${foldersub}!"
}

send_notification_end() {
    notify-send "Finished Screencasting!" "The file was saved to your disk at ${foldersub}!"
}

main() {
    if [ "$1" == "--print" ]; then
        dmenu_ask
        echo "ffmpeg $(print_args)"
        exit 0
    fi

    if [ -f "/tmp/dmenu-record.pid" ] && ! ps -p "$(cat "/tmp/dmenu-record.pid")" > /dev/null 2>&1; then
        notify-send "dmenu-record: Error" "Cannot find PID; Cleaned. Try running the script again!"
        rm /tmp/dmenu-record.pid
        ask_recording && send_notification_begin
        exit 0
    fi

    if [ -f "/tmp/dmenu-record.pid" ]; then
        ask_to_end && \
        send_notification_end && \
        exit 0
    else
        ask_recording && send_notification_begin
    fi
}

main "$@"
